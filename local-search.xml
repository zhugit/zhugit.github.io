<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何在github上搭建自己的博客</title>
    <link href="/2025/03/16/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/03/16/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>为什么要写博客？写博客有必要吗？为什么要搭建自己的博客？<br>1.写博客有助于整理个人的思路和知识。<br>2.写博客有助于扩展自己的社交圈子。<br>3.写博客有助于提升个人的写作和宣传能力。<br>4.最好不要使用现成的技术网站，那没意思，不够硬核。要搞就自己建站，那逼格蹭蹭蹭的就上去了。<br><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/1.png"></p><h2 id="步骤一：安装hexo"><a href="#步骤一：安装hexo" class="headerlink" title="步骤一：安装hexo"></a>步骤一：安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>什么是 <a href="https://hexo.io/zh-cn/docs/">Hexo</a>？<br>Hexo 是一个快速、简洁且高效的博客框架。 Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="1-安装验证"><a href="#1-安装验证" class="headerlink" title="1.安装验证"></a>1.安装验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -vsion<br></code></pre></td></tr></table></figure><p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/2.png"><br>出现版本号即安装成功</p><h2 id="步骤二：本地搭建博客"><a href="#步骤二：本地搭建博客" class="headerlink" title="步骤二：本地搭建博客"></a>步骤二：本地搭建博客</h2><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init myblog<br><span class="hljs-built_in">cd</span> myblog<br>npm install<br></code></pre></td></tr></table></figure><p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/3.png" alt="初始化项目文件"><br>_config.yml 存放的是博客配置信息， source&#x2F;_posts 是存放文章的地方。</p><h3 id="2-运行默认主题"><a href="#2-运行默认主题" class="headerlink" title="2.运行默认主题"></a>2.运行默认主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean         <span class="hljs-comment"># 清除缓存文件，建议写完文章后执行一次</span><br>hexo generate(g) <span class="hljs-comment"># 生成 public 文件夹，写完文章执行</span><br>hexo serve(s)<span class="hljs-comment"># 启动 hexo 服务</span><br></code></pre></td></tr></table></figure><p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/4.png" alt="正在运行"><br>执行命令后访问<a href="http://localhost:4000/">本地4000端口</a>（默认）<br><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/5.png" alt="默认主题样式"><br>至此本地部署已完成，肯定还没完，因为我们需要让别人也可以去看我们的文章，那我们就需要用到<a href="https://pages.github.com/">GitHub Pages</a><br><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/6.png"></p><p>首先我们先注册github账号（国外vpn访问）</p><h2 id="步骤三：使用github-pages"><a href="#步骤三：使用github-pages" class="headerlink" title="步骤三：使用github pages"></a>步骤三：使用github pages</h2><h3 id="1-登录后，点击右上角头像选择-Your-repositories"><a href="#1-登录后，点击右上角头像选择-Your-repositories" class="headerlink" title="1.登录后，点击右上角头像选择 Your repositories"></a>1.登录后，点击右上角头像选择 Your repositories</h3><p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/7.png"></p><h3 id="2-点击新建项目（NEW）"><a href="#2-点击新建项目（NEW）" class="headerlink" title="2.点击新建项目（NEW）"></a>2.点击新建项目（NEW）</h3><p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/8.png"></p><h3 id="3-命名形式为-github的用户名-github-io（我测试过如果不用github的用户名将访问不到）"><a href="#3-命名形式为-github的用户名-github-io（我测试过如果不用github的用户名将访问不到）" class="headerlink" title="3.命名形式为: github的用户名.github.io（我测试过如果不用github的用户名将访问不到）"></a>3.命名形式为: github的用户名.github.io（我测试过如果不用github的用户名将访问不到）</h3><p><img src="/../images/%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/9.png"></p>]]></content>
    
    
    <categories>
      
      <category>部署教学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代理部署到服务器</title>
    <link href="/2025/01/26/test/"/>
    <url>/2025/01/26/test/</url>
    
    <content type="html"><![CDATA[<h2 id="步骤-1：下载并提取-Clash-Verge-内核"><a href="#步骤-1：下载并提取-Clash-Verge-内核" class="headerlink" title="步骤 1：下载并提取 Clash Verge 内核"></a>步骤 1：下载并提取 Clash Verge 内核</h2><h3 id="1-下载-Clash-Verge-的-deb-包："><a href="#1-下载-Clash-Verge-的-deb-包：" class="headerlink" title="1.下载 Clash Verge 的 .deb 包："></a>1.下载 Clash Verge 的 .deb 包：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ wget https://github.com/zzzgydi/clash-verge/releases/download/v1.3.8/clash-verge_1.3.8_amd64.deb  <br></code></pre></td></tr></table></figure><h3 id="2-解压-deb-包："><a href="#2-解压-deb-包：" class="headerlink" title="2.解压 .deb 包："></a>2.解压 .deb 包：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ dpkg-deb -x clash-verge_1.3.8_amd64.deb clash-verge  <br></code></pre></td></tr></table></figure><h3 id="3-找到并复制内核："><a href="#3-找到并复制内核：" class="headerlink" title="3.找到并复制内核："></a>3.找到并复制内核：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> clash-verge/usr/bin/clash /usr/local/bin/  <br>$ <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x /usr/local/bin/clash  <br></code></pre></td></tr></table></figure><h3 id="4-验证内核是否可用："><a href="#4-验证内核是否可用：" class="headerlink" title="4.验证内核是否可用："></a>4.验证内核是否可用：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ clash -v<br></code></pre></td></tr></table></figure><p>如果输出版本信息，说明内核已正确安装。</p><p><img src="/test_image/1.png"></p><h2 id="步骤-2：配置-Clash"><a href="#步骤-2：配置-Clash" class="headerlink" title="步骤 2：配置 Clash"></a>步骤 2：配置 Clash</h2><h3 id="1-创建配置目录："><a href="#1-创建配置目录：" class="headerlink" title="1.创建配置目录："></a>1.创建配置目录：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/.config/clash<br></code></pre></td></tr></table></figure><p><img src="/test_image/2.png"><br>下载购买的订阅地址，并用<a href="https://sub.789.st/">在线订阅转换</a><br><img src="/test_image/3.png"></p><h3 id="2-使用正确的订阅链接步骤"><a href="#2-使用正确的订阅链接步骤" class="headerlink" title="2.使用正确的订阅链接步骤"></a>2.使用正确的订阅链接步骤</h3><p>复制 Subconverter 生成的订阅链接，类似于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://sub.789.st/sub?target=clash&amp;url=http%3A%2F%2F13.215.48.59%2Fapi%2Fv1%2Fclient%2Fsubscribe%3Ftoken%3D8d8af1ff3448a4df321b67de31518695  <br></code></pre></td></tr></table></figure><p>在服务器上使用 curl 命令下载订阅配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -o ~/.config/clash/config.yaml <span class="hljs-string">&quot;[https://sub.789.st/sub?target=clash&amp;url=http%3A%2F%2Fxxx.xxx.xxx.xxx%2Fapi%2Fv1%2Fclient%2Fsubscribe%3Ftoken%](https://sub.789.st/sub?target=clash&amp;url=http://xxx.xxx.xxx.xxx/api/v1/client/subscribe?token=)&quot;</span>  <br></code></pre></td></tr></table></figure><p>检查下载的配置文件是否包含节点信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.config/clash/config.yaml  <br></code></pre></td></tr></table></figure><p>确保文件中有 <code>proxies</code> 和 <code>proxy-groups</code> 的内容。</p><p>为什么要使用转换后的订阅链接？<br>你的原始订阅是Base64编码的vmess链接，Clash需要的是YAML格式的配置文件。使用 Subconverter转换后，可以生成适配Clash的YAML文件格式。</p><h3 id="3-运行clash"><a href="#3-运行clash" class="headerlink" title="3.运行clash"></a>3.运行clash</h3><p><img src="/test_image/4.png"></p><h2 id="步骤3-云服务器的安全组开放端口"><a href="#步骤3-云服务器的安全组开放端口" class="headerlink" title="步骤3.云服务器的安全组开放端口"></a>步骤3.云服务器的安全组开放端口</h2><p>如果你使用的是云服务器（例如阿里云、腾讯云、AWS 等），除了检查服务器内部的防火墙，还需要检查 云服务商的安全组，确保入站规则允许 7890 和 7891 端口的外部访问。<br>操作步骤（以阿里云为例）： 登录 阿里云控制台。 进入 ECS 实例管理。 找到你的服务器实例，进入 安全组配置。 在 入站规则 中，添加以下规则： 端口范围：7890 和 7891 协议类型：TCP 授权对象：0.0.0.0&#x2F;0（允许所有 IP 访问） 保存后，安全组规则会立即生效。<br><img src="/test_image/5.png"><br>虽然 Clash 已经监听了 7890 端口，但服务器的防火墙可能阻挡了外部访问<br>检查防火墙规则<br>运行以下命令，检查防火墙状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw status<br></code></pre></td></tr></table></figure><p>如果端口未开放，可以使用以下命令添加规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow 7890<br><span class="hljs-built_in">sudo</span> ufw allow 7891<br><span class="hljs-built_in">sudo</span> ufw reload<br></code></pre></td></tr></table></figure><p>通过 Clash API 手动切换节点<br>Clash 提供了一个 API，可以用来实时切换节点，而不需要修改配置文件。你可以通过以下步骤切换：<br>安装 curl 工具（如果未安装）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install curl<br></code></pre></td></tr></table></figure><p>运行以下命令，可切换节点为 日本-1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X PUT <span class="hljs-string">&quot;[http://127.0.0.1:9090/proxies/🔰 节点选择](http://127.0.0.1:9090/proxies/🔰 节点选择)&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> -d <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;日本-1&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>验证切换结果 启动 Clash 后，查看日志输出。 如果日志中显示了 proxy&#x3D;日本-1，说明切换成功。<br><img src="/test_image/6.png"></p><h2 id="使用-screen-工具，保持代理一直在服务器上运行"><a href="#使用-screen-工具，保持代理一直在服务器上运行" class="headerlink" title="使用 screen 工具，保持代理一直在服务器上运行"></a>使用 screen 工具，保持代理一直在服务器上运行</h2><p>screen 可以创建一个虚拟的终端会话，即使你关闭 XShell，虚拟终端仍然保持运行，进程不会退出。</p><h3 id="1-安装-screen（如果未安装）："><a href="#1-安装-screen（如果未安装）：" class="headerlink" title="1.安装 screen（如果未安装）："></a>1.安装 screen（如果未安装）：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install screen<br></code></pre></td></tr></table></figure><h3 id="2-启动一个新的-screen-会话："><a href="#2-启动一个新的-screen-会话：" class="headerlink" title="2.启动一个新的 screen 会话："></a>2.启动一个新的 screen 会话：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -S clash<br></code></pre></td></tr></table></figure><h3 id="3-在-screen-会话中运行-Clash："><a href="#3-在-screen-会话中运行-Clash：" class="headerlink" title="3.在 screen 会话中运行 Clash："></a>3.在 screen 会话中运行 Clash：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clash -d ~/.config/clash <span class="hljs-comment">#or clash</span><br></code></pre></td></tr></table></figure><h3 id="4-按下-Ctrl-A，然后按-D，将-screen-会话“分离”（detach），这样即使关闭-XShell，Clash-也会继续运行。"><a href="#4-按下-Ctrl-A，然后按-D，将-screen-会话“分离”（detach），这样即使关闭-XShell，Clash-也会继续运行。" class="headerlink" title="4.按下 Ctrl + A，然后按 D，将 screen 会话“分离”（detach），这样即使关闭 XShell，Clash 也会继续运行。"></a>4.按下 Ctrl + A，然后按 D，将 screen 会话“分离”（detach），这样即使关闭 XShell，Clash 也会继续运行。</h3><h3 id="5-恢复-screen-会话："><a href="#5-恢复-screen-会话：" class="headerlink" title="5.恢复 screen 会话："></a>5.恢复 screen 会话：</h3><p>当你重新连接服务器后，可以通过以下命令恢复 screen 会话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">screen -r clash<br></code></pre></td></tr></table></figure><h2 id="安装扩展-FoxyProxy"><a href="#安装扩展-FoxyProxy" class="headerlink" title="安装扩展 FoxyProxy"></a>安装扩展 FoxyProxy</h2><p><img src="/test_image/7.png"><br>添加&lt;服务器IP:7890&gt;<br><img src="/test_image/8.png"></p><p>这样就可以在任意浏览器上挂代理了</p>]]></content>
    
    
    <categories>
      
      <category>部署教学</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
